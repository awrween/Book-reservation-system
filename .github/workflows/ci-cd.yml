name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.stats()'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      MONGO_URI: mongodb://localhost:27017/book-reservation
      JWT_SECRET: dummy_jwt_secret
      PORT: 5000
      CI: false  # Avoid treating React warnings as errors

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-test  # Ensure deployment only happens after the tests are successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ubuntu/Book-reservation-system

            # Pull the latest changes
            git reset --hard
            git pull origin main

            # Backend setup
            cd backend
            npm install

            # Stop the currently running app if it is using npm
            # First find the PID of the running node process and kill it
            echo "Stopping the current app if it's running..."
            ps aux | grep 'node' | grep 'server.js' | awk '{print $2}' | xargs kill -9

            # Start backend using npm
            echo "Starting the backend app with npm..."
            npm start server

            # Frontend setup
            cd ../frontend
            npm install
            npm run 

            # Optional: Copy build files to Nginx directory (uncomment if using Nginx)
            # sudo cp -r build/* /var/www/html/

            echo "âœ… Deployment finished!"


      
            

